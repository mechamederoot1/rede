#!/usr/bin/env python3
"""
Script Resolver - Vibe Social Network
=====================================
Este script resolve todos os problemas relacionados a:
- Cooldown excessivo de email
- Verifica√ß√£o de email n√£o obrigat√≥ria no login
- Sistema de conta ativa
- Limpeza de registros problem√°ticos
"""

import mysql.connector
import os
import sys
from datetime import datetime, timedelta
import json

class VibeResolver:
    def __init__(self):
        """Inicializa o resolver com configura√ß√µes do banco"""
        self.db_config = {
            'host': '127.0.0.1',
            'port': 3306,
            'user': 'root',
            'password': 'Dashwoodi@1995',
            'database': 'vibe',
            'charset': 'utf8mb4'
        }
        self.connection = None
        
    def connect_database(self):
        """Conecta ao banco de dados"""
        try:
            print("üîå Conectando ao banco de dados...")
            self.connection = mysql.connector.connect(**self.db_config)
            print("‚úÖ Conex√£o estabelecida com sucesso!")
            return True
        except mysql.connector.Error as err:
            print(f"‚ùå Erro ao conectar ao banco: {err}")
            return False
    
    def execute_query(self, query, params=None, fetch=False):
        """Executa uma query no banco de dados"""
        try:
            cursor = self.connection.cursor(dictionary=True)
            cursor.execute(query, params or ())
            
            if fetch:
                result = cursor.fetchall()
                cursor.close()
                return result
            else:
                self.connection.commit()
                affected_rows = cursor.rowcount
                cursor.close()
                return affected_rows
                
        except mysql.connector.Error as err:
            print(f"‚ùå Erro na query: {err}")
            return None
    
    def fix_cooldown_issues(self):
        """Remove registros problem√°ticos que causam cooldown excessivo"""
        print("\nüîß CORRIGINDO PROBLEMAS DE COOLDOWN")
        print("=" * 50)
        
        # 1. Verificar registros atuais
        records = self.execute_query(
            "SELECT user_id, COUNT(*) as count, MAX(created_at) as last_attempt FROM email_verifications GROUP BY user_id",
            fetch=True
        )
        
        if records:
            print(f"üìä Encontrados registros para {len(records)} usu√°rios:")
            for record in records:
                print(f"   - Usu√°rio {record['user_id']}: {record['count']} tentativas, √∫ltima: {record['last_attempt']}")
        
        # 2. Remover registros antigos (mais de 1 hora)
        one_hour_ago = datetime.now() - timedelta(hours=1)
        deleted = self.execute_query(
            "DELETE FROM email_verifications WHERE created_at < %s",
            (one_hour_ago,)
        )
        print(f"üóëÔ∏è Removidos {deleted} registros antigos (mais de 1 hora)")
        
        # 3. Resetar cooldown para usu√°rios espec√≠ficos com problemas
        problematic_users = self.execute_query(
            """SELECT DISTINCT user_id FROM email_verifications 
               WHERE created_at > DATE_SUB(NOW(), INTERVAL 1 HOUR) 
               AND user_id IN (25, 26, 27)""",
            fetch=True
        )
        
        if problematic_users:
            user_ids = [str(u['user_id']) for u in problematic_users]
            print(f"üîÑ Resetando cooldown para usu√°rios: {', '.join(user_ids)}")
            
            deleted_problem = self.execute_query(
                f"DELETE FROM email_verifications WHERE user_id IN ({', '.join(user_ids)})"
            )
            print(f"‚úÖ Removidos {deleted_problem} registros problem√°ticos")
        
        print("‚úÖ Problemas de cooldown corrigidos!")
    
    def fix_user_verification_system(self):
        """Corrige o sistema de verifica√ß√£o de usu√°rios"""
        print("\nüîê CORRIGINDO SISTEMA DE VERIFICA√á√ÉO")
        print("=" * 50)
        
        # 1. Verificar estrutura da tabela users
        columns = self.execute_query(
            "SHOW COLUMNS FROM users LIKE 'is_verified'",
            fetch=True
        )
        
        if not columns:
            print("üìù Adicionando coluna is_verified na tabela users...")
            self.execute_query(
                "ALTER TABLE users ADD COLUMN is_verified BOOLEAN DEFAULT FALSE"
            )
            print("‚úÖ Coluna is_verified adicionada!")
        else:
            print("‚úÖ Coluna is_verified j√° existe")
        
        # 2. Adicionar coluna account_status se n√£o existir
        status_columns = self.execute_query(
            "SHOW COLUMNS FROM users LIKE 'account_status'",
            fetch=True
        )
        
        if not status_columns:
            print("üìù Adicionando coluna account_status na tabela users...")
            self.execute_query(
                """ALTER TABLE users ADD COLUMN account_status 
                   ENUM('pending', 'active', 'suspended', 'banned') DEFAULT 'pending'"""
            )
            print("‚úÖ Coluna account_status adicionada!")
        else:
            print("‚úÖ Coluna account_status j√° existe")
        
        # 3. Atualizar usu√°rios n√£o verificados
        unverified = self.execute_query(
            "SELECT COUNT(*) as count FROM users WHERE is_verified = FALSE OR is_verified IS NULL",
            fetch=True
        )
        
        if unverified and unverified[0]['count'] > 0:
            print(f"üìä Encontrados {unverified[0]['count']} usu√°rios n√£o verificados")
            
            # Marcar contas n√£o verificadas como 'pending'
            updated = self.execute_query(
                """UPDATE users SET account_status = 'pending' 
                   WHERE (is_verified = FALSE OR is_verified IS NULL) 
                   AND account_status != 'suspended' 
                   AND account_status != 'banned'"""
            )
            print(f"üîÑ {updated} contas marcadas como 'pending'")
        
        # 4. Ativar contas j√° verificadas
        verified_inactive = self.execute_query(
            """UPDATE users SET account_status = 'active' 
               WHERE is_verified = TRUE AND account_status = 'pending'"""
        )
        print(f"‚úÖ {verified_inactive} contas verificadas ativadas")
        
        print("‚úÖ Sistema de verifica√ß√£o corrigido!")
    
    def create_account_verification_procedures(self):
        """Cria procedures para verifica√ß√£o de conta"""
        print("\n‚öôÔ∏è CRIANDO PROCEDURES DE VERIFICA√á√ÉO")
        print("=" * 50)
        
        # Procedure para verificar se usu√°rio pode fazer login
        can_login_procedure = """
        CREATE OR REPLACE FUNCTION can_user_login(user_id INT) 
        RETURNS JSON
        READS SQL DATA
        DETERMINISTIC
        BEGIN
            DECLARE result JSON;
            DECLARE is_verified BOOLEAN DEFAULT FALSE;
            DECLARE account_status VARCHAR(20) DEFAULT 'pending';
            
            SELECT u.is_verified, u.account_status 
            INTO is_verified, account_status
            FROM users u WHERE u.id = user_id;
            
            IF is_verified = TRUE AND account_status = 'active' THEN
                SET result = JSON_OBJECT(
                    'can_login', TRUE,
                    'verified', TRUE,
                    'status', account_status,
                    'message', 'Login permitido'
                );
            ELSEIF is_verified = FALSE THEN
                SET result = JSON_OBJECT(
                    'can_login', FALSE,
                    'verified', FALSE,
                    'status', account_status,
                    'message', 'Email n√£o verificado'
                );
            ELSEIF account_status != 'active' THEN
                SET result = JSON_OBJECT(
                    'can_login', FALSE,
                    'verified', is_verified,
                    'status', account_status,
                    'message', 'Conta n√£o est√° ativa'
                );
            ELSE
                SET result = JSON_OBJECT(
                    'can_login', FALSE,
                    'verified', is_verified,
                    'status', account_status,
                    'message', 'Login n√£o permitido'
                );
            END IF;
            
            RETURN result;
        END
        """
        
        try:
            self.execute_query(can_login_procedure)
            print("‚úÖ Function can_user_login criada!")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao criar function: {e}")
            print("üí° Continuando sem a function...")
        
        print("‚úÖ Procedures de verifica√ß√£o configuradas!")
    
    def fix_email_service_config(self):
        """Corrige configura√ß√µes do servi√ßo de email"""
        print("\nüìß CORRIGINDO CONFIGURA√á√ïES DE EMAIL")
        print("=" * 50)
        
        # Caminho do arquivo .env
        env_path = "email-service/.env"
        
        # Configura√ß√£o correta
        correct_config = """# Configura√ß√µes do banco de dados MySQL
DB_HOST=127.0.0.1
DB_PORT=3306
DB_USER=root
DB_PASSWORD=Dashwoodi@1995
DB_NAME=vibe

# Configura√ß√µes SMTP
SMTP_HOST=smtp.hostinger.com
SMTP_PORT=587
SMTP_USER=suporte@meuvibe.com
SMTP_PASS=Dashwoodi@1995
SMTP_FROM=no-reply@meuvibe.com

# Configura√ß√µes de verifica√ß√£o (valores corretos)
VERIFICATION_CODE_EXPIRY=300000
RESEND_COOLDOWN=60000
MAX_RESEND_ATTEMPTS=5

# Porta do servi√ßo
PORT=3001
"""
        
        try:
            with open(env_path, 'w') as f:
                f.write(correct_config)
            print(f"‚úÖ Arquivo {env_path} atualizado com configura√ß√µes corretas!")
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao atualizar .env: {e}")
            print("üí° Configure manualmente o arquivo .env do email-service")
        
        print("‚úÖ Configura√ß√µes de email corrigidas!")
    
    def create_summary_report(self):
        """Cria relat√≥rio resumo do estado atual"""
        print("\nüìä RELAT√ìRIO DE ESTADO ATUAL")
        print("=" * 50)
        
        # Usu√°rios por status
        user_stats = self.execute_query(
            """SELECT 
                account_status,
                is_verified,
                COUNT(*) as count
               FROM users 
               GROUP BY account_status, is_verified
               ORDER BY account_status, is_verified""",
            fetch=True
        )
        
        if user_stats:
            print("üë• Usu√°rios por status:")
            for stat in user_stats:
                verified_text = "‚úÖ Verificado" if stat['is_verified'] else "‚ùå N√£o verificado"
                print(f"   - {stat['account_status'].title()}: {stat['count']} usu√°rios ({verified_text})")
        
        # Registros de verifica√ß√£o pendentes
        pending_verifications = self.execute_query(
            "SELECT COUNT(*) as count FROM email_verifications WHERE verified = FALSE",
            fetch=True
        )
        
        if pending_verifications:
            count = pending_verifications[0]['count']
            print(f"üìß Verifica√ß√µes pendentes: {count}")
        
        # √öltimas tentativas de verifica√ß√£o
        recent_attempts = self.execute_query(
            """SELECT user_id, email, created_at 
               FROM email_verifications 
               ORDER BY created_at DESC 
               LIMIT 5""",
            fetch=True
        )
        
        if recent_attempts:
            print("üìã √öltimas tentativas de verifica√ß√£o:")
            for attempt in recent_attempts:
                print(f"   - Usu√°rio {attempt['user_id']}: {attempt['email']} em {attempt['created_at']}")
        
        print("‚úÖ Relat√≥rio conclu√≠do!")
    
    def run_all_fixes(self):
        """Executa todas as corre√ß√µes"""
        print("üöÄ INICIANDO RESOLU√á√ÉO DE PROBLEMAS - VIBE")
        print("=" * 60)
        print(f"‚è∞ In√≠cio: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if not self.connect_database():
            return False
        
        try:
            self.fix_cooldown_issues()
            self.fix_user_verification_system()
            self.create_account_verification_procedures()
            self.fix_email_service_config()
            self.create_summary_report()
            
            print("\n" + "=" * 60)
            print("üéâ TODAS AS CORRE√á√ïES APLICADAS COM SUCESSO!")
            print("=" * 60)
            print("\n‚úÖ Pr√≥ximos passos:")
            print("1. Reiniciar o servi√ßo de email: cd email-service && npm run dev")
            print("2. Reiniciar o backend principal")
            print("3. Testar login com conta n√£o verificada (deve bloquear)")
            print("4. Testar verifica√ß√£o de email (cooldown de 60s)")
            print("\nüí° Agora o sistema:")
            print("- ‚úÖ Bloqueia login sem verifica√ß√£o de email")
            print("- ‚úÖ Usa cooldown de 60 segundos")
            print("- ‚úÖ Gerencia status da conta corretamente")
            print("- ‚úÖ Remove registros problem√°ticos automaticamente")
            
            return True
            
        except Exception as e:
            print(f"\n‚ùå Erro durante a execu√ß√£o: {e}")
            return False
        finally:
            if self.connection:
                self.connection.close()
                print("\nüîå Conex√£o com banco fechada")

def main():
    """Fun√ß√£o principal"""
    resolver = VibeResolver()
    success = resolver.run_all_fixes()
    
    if success:
        print("\nüéØ Execu√ß√£o conclu√≠da com sucesso!")
        sys.exit(0)
    else:
        print("\nüí• Execu√ß√£o falhou. Verifique os logs acima.")
        sys.exit(1)

if __name__ == "__main__":
    main()

#!/usr/bin/env python3
"""
Verifica√ß√£o r√°pida do banco de dados de verifica√ß√£o de email
"""
import sys
import os
from datetime import datetime, timedelta

# Adicionar o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from core.database import SessionLocal
from routes.email_verification import EmailVerification

def quick_check():
    db = SessionLocal()
    
    try:
        print("üîç VERIFICA√á√ÉO R√ÅPIDA - EMAIL VERIFICATION")
        print("="*50)
        
        # Verificar √∫ltimos c√≥digos
        recent_codes = db.query(EmailVerification).filter(
            EmailVerification.created_at > datetime.utcnow() - timedelta(hours=1)
        ).order_by(EmailVerification.created_at.desc()).limit(5).all()
        
        print(f"üìä C√≥digos criados na √∫ltima hora: {len(recent_codes)}")
        
        for code in recent_codes:
            now = datetime.utcnow()
            is_expired = code.expires_at < now
            time_left = (code.expires_at - now).total_seconds() / 60
            
            print(f"\nüë§ User ID: {code.user_id}")
            print(f"üìß Email: {code.email}")
            print(f"üî¢ C√≥digo: {code.verification_code}")
            print(f"‚è∞ Criado: {code.created_at}")
            print(f"‚è∞ Expira: {code.expires_at}")
            print(f"üî¥ Status: {'EXPIRADO' if is_expired else f'V√ÅLIDO ({time_left:.1f}min restantes)'}")
            print(f"‚úÖ Verificado: {'SIM' if code.verified else 'N√ÉO'}")
        
        # Teste de consulta
        print(f"\nüß™ TESTE DE CONSULTA")
        print("="*30)
        
        if recent_codes:
            test_code = recent_codes[0]
            print(f"Testando busca do c√≥digo: {test_code.verification_code}")
            
            found = db.query(EmailVerification).filter(
                EmailVerification.user_id == test_code.user_id,
                EmailVerification.verification_code == test_code.verification_code,
                EmailVerification.verified == False,
                EmailVerification.expires_at > datetime.utcnow()
            ).first()
            
            if found:
                print("‚úÖ C√≥digo encontrado pela consulta!")
            else:
                print("‚ùå C√≥digo N√ÉO encontrado pela consulta!")
                
                # Verificar raz√µes poss√≠veis
                print("\nüîç Investigando raz√µes:")
                
                # C√≥digo existe?
                exists = db.query(EmailVerification).filter(
                    EmailVerification.verification_code == test_code.verification_code
                ).first()
                if not exists:
                    print("  ‚ùå C√≥digo n√£o existe no banco")
                else:
                    print("  ‚úÖ C√≥digo existe no banco")
                
                # Usu√°rio correto?
                user_match = db.query(EmailVerification).filter(
                    EmailVerification.user_id == test_code.user_id,
                    EmailVerification.verification_code == test_code.verification_code
                ).first()
                if not user_match:
                    print("  ‚ùå User ID n√£o confere")
                else:
                    print("  ‚úÖ User ID confere")
                
                # J√° verificado?
                if test_code.verified:
                    print("  ‚ùå C√≥digo j√° foi verificado")
                else:
                    print("  ‚úÖ C√≥digo n√£o foi verificado ainda")
                
                # Expirado?
                if test_code.expires_at < datetime.utcnow():
                    print("  ‚ùå C√≥digo expirado")
                else:
                    print("  ‚úÖ C√≥digo n√£o expirado")
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
    finally:
        db.close()

if __name__ == "__main__":
    quick_check()

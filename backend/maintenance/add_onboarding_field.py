#!/usr/bin/env python3
"""
Script para adicionar o campo onboarding_completed √† tabela users
"""
import sys
import os
from datetime import datetime

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from core.database import engine, SessionLocal
from sqlalchemy import text

def add_onboarding_field():
    """Adiciona o campo onboarding_completed √† tabela users"""
    db = SessionLocal()
    
    try:
        print("üîß Verificando se o campo onboarding_completed j√° existe...")
        
        # Verificar se a coluna j√° existe
        result = db.execute(text("""
            SELECT COUNT(*) as count 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_SCHEMA = DATABASE() 
            AND TABLE_NAME = 'users' 
            AND COLUMN_NAME = 'onboarding_completed'
        """)).fetchone()
        
        if result.count > 0:
            print("‚úÖ Campo onboarding_completed j√° existe na tabela users")
            return True
        
        print("‚ûï Adicionando campo onboarding_completed √† tabela users...")
        
        # Adicionar a coluna
        db.execute(text("""
            ALTER TABLE users 
            ADD COLUMN onboarding_completed BOOLEAN DEFAULT FALSE 
            COMMENT 'Indica se o usu√°rio completou o tutorial de boas-vindas'
        """))
        
        print("‚úÖ Campo onboarding_completed adicionado com sucesso!")
        
        # Atualizar usu√°rios existentes como tendo completado o onboarding
        # (assumindo que s√£o usu√°rios antigos que n√£o precisam ver o tutorial)
        result = db.execute(text("""
            UPDATE users 
            SET onboarding_completed = TRUE 
            WHERE created_at < NOW() - INTERVAL 1 DAY
        """))
        
        updated_count = result.rowcount
        print(f"‚úÖ {updated_count} usu√°rios existentes marcados como tendo completado o onboarding")
        
        db.commit()
        print("üéâ Migra√ß√£o conclu√≠da com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a migra√ß√£o: {e}")
        db.rollback()
        return False
    finally:
        db.close()

def verify_migration():
    """Verifica se a migra√ß√£o foi aplicada corretamente"""
    db = SessionLocal()
    
    try:
        print("\nüîç Verificando a migra√ß√£o...")
        
        # Verificar estrutura da tabela
        result = db.execute(text("""
            DESCRIBE users
        """)).fetchall()
        
        onboarding_field_found = False
        for row in result:
            if row[0] == 'onboarding_completed':
                onboarding_field_found = True
                print(f"‚úÖ Campo encontrado: {row[0]} - {row[1]} - Default: {row[4]}")
                break
        
        if not onboarding_field_found:
            print("‚ùå Campo onboarding_completed n√£o encontrado!")
            return False
        
        # Verificar dados
        result = db.execute(text("""
            SELECT 
                COUNT(*) as total_users,
                SUM(CASE WHEN onboarding_completed = TRUE THEN 1 ELSE 0 END) as completed_onboarding,
                SUM(CASE WHEN onboarding_completed = FALSE THEN 1 ELSE 0 END) as pending_onboarding
            FROM users
        """)).fetchone()
        
        print(f"üìä Estat√≠sticas:")
        print(f"   Total de usu√°rios: {result.total_users}")
        print(f"   Onboarding completo: {result.completed_onboarding}")
        print(f"   Onboarding pendente: {result.pending_onboarding}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro durante a verifica√ß√£o: {e}")
        return False
    finally:
        db.close()

if __name__ == "__main__":
    print("üöÄ Iniciando migra√ß√£o para adicionar campo onboarding_completed")
    print("=" * 60)
    
    # Testar conex√£o com o banco
    try:
        db = SessionLocal()
        db.execute(text("SELECT 1"))
        db.close()
        print("‚úÖ Conex√£o com o banco de dados estabelecida")
    except Exception as e:
        print(f"‚ùå Erro de conex√£o com o banco: {e}")
        print("Verifique suas configura√ß√µes de banco de dados no .env")
        sys.exit(1)
    
    # Executar migra√ß√£o
    if add_onboarding_field():
        if verify_migration():
            print("\nüéâ Migra√ß√£o conclu√≠da com sucesso!")
            print("O campo onboarding_completed foi adicionado √† tabela users")
        else:
            print("\n‚ö†Ô∏è Migra√ß√£o executada, mas verifica√ß√£o falhou")
            sys.exit(1)
    else:
        print("\n‚ùå Falha na migra√ß√£o")
        sys.exit(1)

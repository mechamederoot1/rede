#!/usr/bin/env python3
"""
Teste manual do endpoint de stories
"""

import sys
import os
import requests
import json

# Configura√ß√µes
API_BASE = "http://localhost:8000"

def test_stories_endpoint():
    """Teste b√°sico do endpoint de stories"""
    print("üß™ TESTANDO ENDPOINT DE STORIES")
    print("=" * 50)
    
    # 1. Testar se API est√° rodando
    try:
        response = requests.get(f"{API_BASE}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ API est√° rodando")
        else:
            print(f"‚ùå API n√£o est√° funcionando: {response.status_code}")
            return False
    except requests.exceptions.ConnectionError:
        print("‚ùå API n√£o est√° acess√≠vel. Certifique-se que o backend est√° rodando na porta 8000")
        return False
    
    # 2. Testar endpoint stories com OPTIONS
    try:
        response = requests.options(f"{API_BASE}/stories/", timeout=5)
        if response.status_code in [200, 405]:
            print("‚úÖ Endpoint /stories/ existe")
        else:
            print(f"‚ùå Endpoint /stories/ n√£o encontrado: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar endpoint: {e}")
        return False
    
    # 3. Tentar fazer login com usu√°rio de teste
    print("\nüîê Testando login...")
    login_data = {
        "username": "test@story.com",
        "password": "123456"
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/login", data=login_data, timeout=10)
        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get("access_token")
            print("‚úÖ Login realizado com sucesso")
        else:
            print(f"‚ö†Ô∏è Login falhou: {response.status_code}")
            print("   Isso √© normal se n√£o houver usu√°rio de teste")
            # Criar um token falso para testar apenas a estrutura da API
            token = "fake_token_for_structure_test"
    except Exception as e:
        print(f"‚ö†Ô∏è Erro no login: {e}")
        token = "fake_token_for_structure_test"
    
    # 4. Testar cria√ß√£o de story (mesmo com token falso, deve mostrar erro de auth, n√£o 404)
    print("\nüìù Testando cria√ß√£o de story...")
    
    story_data = {
        "content": "Test story from script",
        "background_color": "#FF5722",
        "duration_hours": "24"
    }
    
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.post(f"{API_BASE}/stories/", data=story_data, headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Story criada com sucesso!")
            result = response.json()
            print(f"   Story ID: {result.get('story_id')}")
        elif response.status_code == 401:
            print("‚úÖ Endpoint funciona (erro de autentica√ß√£o esperado)")
        elif response.status_code == 404:
            print("‚ùå Endpoint n√£o encontrado (404)")
            return False
        else:
            print(f"‚ö†Ô∏è Resposta inesperada: {response.status_code}")
            print(f"   Resposta: {response.text[:200]}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar cria√ß√£o: {e}")
        return False
    
    # 5. Testar busca de stories
    print("\nüìñ Testando busca de stories...")
    
    try:
        response = requests.get(f"{API_BASE}/stories/", headers=headers, timeout=10)
        
        if response.status_code == 200:
            print("‚úÖ Busca de stories funciona!")
            stories = response.json()
            print(f"   Encontradas {len(stories)} stories")
        elif response.status_code == 401:
            print("‚úÖ Endpoint de busca funciona (erro de autentica√ß√£o esperado)")
        elif response.status_code == 404:
            print("‚ùå Endpoint de busca n√£o encontrado (404)")
            return False
        else:
            print(f"‚ö†Ô∏è Resposta inesperada na busca: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Erro ao testar busca: {e}")
        return False
    
    print("\n" + "=" * 50)
    print("üéâ TESTE CONCLU√çDO - ENDPOINTS EST√ÉO FUNCIONANDO!")
    print("\nSe voc√™ viu '‚úÖ Endpoint funciona' nas mensagens acima,")
    print("significa que o problema n√£o √© o endpoint, mas sim:")
    print("1. Autentica√ß√£o/token")
    print("2. Dados sendo enviados")
    print("3. Valida√ß√£o no backend")
    print("\nPr√≥ximo passo: Verificar logs do backend enquanto testa no front-end")
    
    return True

if __name__ == "__main__":
    success = test_stories_endpoint()
    if not success:
        print("\nüí• FALHA NOS TESTES - VERIFIQUE SE O BACKEND EST√Å RODANDO")
        sys.exit(1)
